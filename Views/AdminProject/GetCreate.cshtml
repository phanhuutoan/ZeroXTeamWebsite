@using System.Text.Json
@using ZeroXTeam.Models.RenderViewModel
@model ZeroXTeam.Models.ProjectViewModel

@{
  var isEdit = ViewData["EditMode"] != null;
  var project = ViewData["Project"] as RenderProjectViewModel;
  var members = ViewData["Members"] as List<ZeroXTeam.Entities.Member>;
 
  var title = !isEdit ? "Create Project" : "Edit Project";
  var buttonTitle = !isEdit ? "Create" : "Edit";

  var formAction = isEdit ? "/admin/projects/edit" : "/admin/projects/create";
}

<div class="container" style="margin-top: 3rem">
  <div class="row">
    <form action="@formAction" method="POST" class="col-md-6 col-sm-12" enctype="multipart/form-data" >
      <h3> @title </h3>
      @if (isEdit)
      {
        <input type="hidden" value="@project?.Id" asp-for="Id">          
      }
      <div class="form-group">
        <label for="Name">Name</label>
        <input type="text" asp-for="Name" class="form-control" value="@project?.Name">
      </div>
      <div class="form-group">
        <label for="Description">Description</label>
        <textarea rows="4" class="form-control" name="Description">@project?.Description</textarea>
      </div>
      <div class="form-group">
        <label for="Photo">Project Photo</label>
        <input type="file" asp-for="Photo" class="form-control">
      </div>
      <div class="form-group">
        <label for="Page">Page</label>
        <input type="text" asp-for="Page" class="form-control" value="@project?.Page">
      </div>
      <div class="form-group">
        <label for="Repository">Repository</label>
        <input type="text" asp-for="Repository" class="form-control" value="@project?.Repository">
      </div>
      <div class="form-group">
        <label for="StartDate">Start Date</label>
        <input type="date" asp-for="StartDate" class="form-control" value="@project?.StartDate.ToString("yyyy-MM-dd")">
      </div>
      <div class="form-group">
        <label for="EndDate">End Date</label>
        <input type="date" asp-for="EndDate" class="form-control" value="@project?.EndDate.ToString("yyyy-MM-dd")">
      </div>
      <button class="btn btn-primary">@buttonTitle</button>
    </form>
    @if(isEdit)
    {
      <div class="col-md-6 col-sm-12">
        <h3> Project photo: </h3>
        <img src="@project?.PhotoUrl" alt="photo" class="image-thumbnail" style="height: 20rem;">
      </div>
    }
  </div>
</div>
    
<div id="app-member" class="container" style="margin-top: 3rem; margin-bottom: 3rem ">
  @if (isEdit)
  {
    <div class="row">
      <div class="col-md-6">
        <h4 class="mb-4">Add member to this project</h4>  
        <div class="row">
          <div v-for="member in members" class="member col-md-4 col-sm-6 mt-2" v-on:click="addMember(member.Id)">
            <div class="member-info">
              <img :src="member.PhotoUrl" alt="member photo">
              <h6> {{ member.Name }} </h6>
            </div>
          </div>    
        </div>
      </div>

      <form 
        :action="`/admin/projects/add-members/${@project?.Id}?memberIds=${memberIds}`" 
        class="col-md-6" method="POST">
        <h4 class="mb-4">Member joined this project (click to remove)</h4>  
        <div class="row">
          <div v-for="member in membersInProjects" class="member col-md-4 col-sm-6 mt-2"  v-on:click="removeMember(member.Id)">
            <div class="member-info member-info--red">
              <img :src="member.PhotoUrl" alt="member photo">
              <h6> {{ member.Name }} </h6>
            </div>
          </div>    
        </div>
        <button class="btn btn-primary mt-4">Save members</button>
      </form>    
    </div>      
  }
</div>
<script>
  new Vue({
    el: '#app-member',
    data: {
      memberId: '',
      members: @Html.Raw(JsonSerializer.Serialize(members)) || [],
      membersInProjects: @Html.Raw(JsonSerializer.Serialize(project?.MemberJoined)) || []
    },
    methods: {
      addMember(id) {
        const member = this.members.find(ele => ele.Id === id)
        this.membersInProjects.push(member);
        this.members = this.members.filter(ele => ele.Id !== id)
      },
      removeMember(id) {
        const member = this.membersInProjects.find(ele => ele.Id === id)
        this.members.push(member);
        this.membersInProjects = this.membersInProjects.filter(ele => ele.Id !== id)
      }
    },
    computed: {
      memberIds() {
        return this.membersInProjects.map(ele => ele.Id).join(',')
      }
    }
  })
</script>